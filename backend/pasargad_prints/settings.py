"""
Django settings for pasargad_prints project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
# Use custom config loader that points to root .env file
from .config import config, BACKEND_DIR, PROJECT_ROOT

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default=None)

# Validate SECRET_KEY is properly configured
if not SECRET_KEY:
    if DEBUG:
        # Development fallback
        SECRET_KEY = 'django-insecure-development-key-' + os.urandom(32).hex()[:32]
        import warnings
        warnings.warn(
            "Using auto-generated SECRET_KEY for development. "
            "Set SECRET_KEY environment variable for production.",
            UserWarning
        )
    else:
        raise ValueError(
            "SECRET_KEY environment variable is required in production. "
            "Generate one with: python -c 'import secrets; print(secrets.token_urlsafe(64))'"
        )

# Validate SECRET_KEY is not using the default insecure key
if 'django-insecure-g#8_3y58dah+oz3y+z%d^qphxyrp02btabxwg=f#v_g25scf-n' in SECRET_KEY:
    raise ValueError(
        "Default insecure SECRET_KEY detected. "
        "Generate a new secure key: python -c 'import secrets; print(secrets.token_urlsafe(64))'"
    )

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Production Environment Variable Validation
if not DEBUG:
    # Critical production environment variables
    REQUIRED_PROD_VARS = [
        'SECRET_KEY',
        'DB_NAME',
        'DB_USER', 
        'DB_PASSWORD',
        'DB_HOST',
        'ALLOWED_HOSTS',
        'EMAIL_HOST_USER',
        'EMAIL_HOST_PASSWORD',
        'STRIPE_SECRET_KEY',
        'STRIPE_WEBHOOK_SECRET',
    ]
    
    # Recommended production environment variables
    RECOMMENDED_PROD_VARS = [
        'GOSHIPPO_API_KEY',
        'GOSHIPPO_WEBHOOK_SECRET',
        'REDIS_URL',
        'AWS_ACCESS_KEY_ID',
        'AWS_SECRET_ACCESS_KEY',
        'CELERY_BROKER_URL',
        'FRONTEND_URL',
    ]
    
    missing_required = []
    missing_recommended = []
    
    for var in REQUIRED_PROD_VARS:
        if not config(var, default=None):
            missing_required.append(var)
    
    for var in RECOMMENDED_PROD_VARS:
        if not config(var, default=None):
            missing_recommended.append(var)
    
    if missing_required:
        raise ValueError(
            f"Missing required production environment variables: {', '.join(missing_required)}. "
            "These must be set for production deployment."
        )
    
    if missing_recommended:
        import warnings
        warnings.warn(
            f"Missing recommended production environment variables: {', '.join(missing_recommended)}. "
            "Some features may not work correctly.",
            UserWarning
        )

# ALLOWED_HOSTS - Restrictive for production
if DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', '10.100.100.118', '.ngrok-free.app', '.ngrok.io', 'backend']
else:
    ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='pasargadprints.com,www.pasargadprints.com,backend').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # For JWT token blacklisting
    'drf_spectacular',  # API documentation
    'corsheaders',
    'django.contrib.postgres',  # For full-text search
    # Third-party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    # Local apps
    'users',
    'products',
    'orders',
    'cart',
    'payments',
    'wishlist',
    'recommendations',  # Keep for now - has implemented functionality
    'promotions',  # Keep for now - referenced by Order model
    'analytics',  # Keep for now - has middleware dependencies
    # 'shipping',  # Goshippo shipping integration - temporarily disabled
    'utils.apps.UtilsConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom middleware - consolidated
    'utils.middleware.RequestLoggingMiddleware',  # Includes performance monitoring
    'utils.middleware.CacheMiddleware',  # API caching
    # 'utils.goshippo_middleware.GoshippoAuthenticationMiddleware',  # Goshippo authentication - disabled
    # 'utils.goshippo_middleware.GoshippoRequestProcessingMiddleware',  # Goshippo request processing - disabled
    # 'utils.goshippo_middleware.GoshippoResponseProcessingMiddleware',  # Goshippo response processing - disabled
    # Removed redundant middleware:
    # - SecurityHeadersMiddleware (Django's SecurityMiddleware handles this)
    # - PerformanceMonitoringMiddleware (consolidated into RequestLoggingMiddleware)
    # - analytics.middleware.AnalyticsMiddleware (using Google Analytics instead)
]

ROOT_URLCONF = 'pasargad_prints.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pasargad_prints.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# PRODUCTION SECURITY: PostgreSQL ONLY - No SQLite fallback
# Validate required database environment variables
DB_NAME = config('DB_NAME', default=None)
DB_USER = config('DB_USER', default=None)
DB_PASSWORD = config('DB_PASSWORD', default=None)
DB_HOST = config('DB_HOST', default=None)
DB_PORT = config('DB_PORT', default='5432')

# Enforce required database configuration in production
if not DEBUG:
    if not all([DB_NAME, DB_USER, DB_PASSWORD, DB_HOST]):
        raise ValueError(
            "Production database configuration incomplete. "
            "Required environment variables: DB_NAME, DB_USER, DB_PASSWORD, DB_HOST"
        )

# Allow local development flexibility but prefer PostgreSQL
if DEBUG and not DB_NAME:
    # Development fallback to PostgreSQL with defaults
    DB_NAME = 'pasargad_prints'
    DB_USER = 'postgres'
    DB_PASSWORD = 'postgres'
    DB_HOST = 'localhost'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'OPTIONS': {
            'connect_timeout': 10,
        },
        'CONN_MAX_AGE': 0 if DEBUG else 60,  # Connection pooling in production
    }
}

DATABASE_TYPE = 'postgresql'

# Validate database connection on startup
try:
    import psycopg2
    # Test database connection with actual configured values
    conn = psycopg2.connect(
        host=DB_HOST,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        port=DB_PORT,
        connect_timeout=10
    )
    conn.close()
except ImportError:
    raise ImportError(
        "PostgreSQL adapter (psycopg2) not installed. "
        "Install with: pip install psycopg2-binary"
    )
except psycopg2.OperationalError as e:
    if not DEBUG:
        raise ConnectionError(f"Production database connection failed: {e}")
    else:
        # In development, show warning but allow startup
        import warnings
        warnings.warn(
            f"Database connection failed: {e}. "
            "Ensure PostgreSQL is running with correct credentials.",
            UserWarning
        )


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,  # Enforce minimum 8 characters
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.User'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'EXCEPTION_HANDLER': 'utils.exceptions.custom_exception_handler',
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'utils.rate_limiting.BurstRateThrottle',
        'utils.rate_limiting.SustainedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/hour',     # Increased for development
        'user': '5000/hour',     # Increased for development
        'burst': '100/minute',   # Increased for development
        'sustained': '10000/day', # Increased for development
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Removed duplicate REST_FRAMEWORK configuration

# Simple JWT - Enhanced security settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Reduced from 60 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
}

# DRF Spectacular (API Documentation) Configuration
SPECTACULAR_SETTINGS = {
    'TITLE': 'Pasargad Prints API',
    'DESCRIPTION': 'API documentation for Pasargad Prints e-commerce platform',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/',
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayRequestDuration': True,
        'filter': True,
        'tryItOutEnabled': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'hideHostname': False,
        'lazyRendering': True,
        'nativeScrollbars': True,
        'pathInMiddlePanel': True,
        'requiredPropsFirst': True,
        'scrollYOffset': 0,
        'sortPropsAlphabetically': True,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#2563eb'
                }
            }
        }
    },
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'ENUM_NAME_OVERRIDES': {
        'OrderStatusEnum': 'orders.models.Order.status.field.choices',
        'PaymentStatusEnum': 'payments.models.Payment.status.field.choices',
    },
    'SECURITY': [
        {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT'
        }
    ],
    'SERVERS': [
        {
            'url': config('API_BASE_URL', default='http://localhost:8000/api/'),
            'description': 'Development server'
        },
    ] if DEBUG else [
        {
            'url': config('API_BASE_URL', default='https://api.pasargadprints.com/api/'),
            'description': 'Production server'
        },
    ],
    'TAGS': [
        {'name': 'authentication', 'description': 'User authentication and authorization'},
        {'name': 'users', 'description': 'User management'},
        {'name': 'products', 'description': 'Product catalog and management'},
        {'name': 'orders', 'description': 'Order processing and management'},
        {'name': 'cart', 'description': 'Shopping cart operations'},
        {'name': 'payments', 'description': 'Payment processing'},
        {'name': 'shipping', 'description': 'Shipping and logistics'},
        {'name': 'wishlist', 'description': 'User wishlist management'},
        {'name': 'analytics', 'description': 'Analytics and reporting'},
        {'name': 'admin', 'description': 'Administrative operations'},
    ],
}

# CORS settings - More restrictive for production
if DEBUG:
    # Development settings - allow local and ngrok
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://10.100.100.118:3000",
    ]
    
    # Allow ngrok subdomains for development
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https://.*\.ngrok-free\.app$",
        r"^https://.*\.ngrok\.io$",
    ]
else:
    # Production settings - only allow specific origins
    CORS_ALLOWED_ORIGINS = [
        config('PRODUCTION_FRONTEND_URL', default='https://pasargadprints.com'),
    ]
    CORS_ALLOWED_ORIGIN_REGEXES = []

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@pasargadprints.com')

# Stripe settings
STRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY', default='')
STRIPE_SECRET_KEY = config('STRIPE_SECRET_KEY', default='')
STRIPE_WEBHOOK_SECRET = config('STRIPE_WEBHOOK_SECRET', default='')

# Goshippo settings - Shipping API
GOSHIPPO_API_KEY = config('GOSHIPPO_API_KEY', default='shippo_test_a273c78ecb97dae87d34dbec6c37cef303c80d15')
GOSHIPPO_DEBUG = config('GOSHIPPO_DEBUG', default=DEBUG, cast=bool)
GOSHIPPO_WEBHOOK_SECRET = config('GOSHIPPO_WEBHOOK_SECRET', default='')

# Default shipping origin address
SHIPPING_ORIGIN = {
    'name': config('SHIPPING_ORIGIN_NAME', default='Pasargad Prints'),
    'company': config('SHIPPING_ORIGIN_COMPANY', default='Pasargad Prints'),
    'street1': config('SHIPPING_ORIGIN_STREET1', default=''),
    'street2': config('SHIPPING_ORIGIN_STREET2', default=''),
    'city': config('SHIPPING_ORIGIN_CITY', default=''),
    'state': config('SHIPPING_ORIGIN_STATE', default=''),
    'zip': config('SHIPPING_ORIGIN_ZIP', default=''),
    'country': config('SHIPPING_ORIGIN_COUNTRY', default='US'),
    'phone': config('SHIPPING_ORIGIN_PHONE', default=''),
    'email': config('SHIPPING_ORIGIN_EMAIL', default=''),
}


# Business address settings for shipping
BUSINESS_NAME = config('BUSINESS_NAME', default='Pasargad Prints')
BUSINESS_ADDRESS = config('BUSINESS_ADDRESS', default='')
BUSINESS_CITY = config('BUSINESS_CITY', default='')
BUSINESS_STATE = config('BUSINESS_STATE', default='')
BUSINESS_ZIP = config('BUSINESS_ZIP', default='')
BUSINESS_COUNTRY = config('BUSINESS_COUNTRY', default='US')
BUSINESS_PHONE = config('BUSINESS_PHONE', default='')
BUSINESS_EMAIL = config('BUSINESS_EMAIL', default='')


# Frontend URL for emails and links
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:3000')

# Session settings
SESSION_COOKIE_AGE = 3600  # 1 hour (was too short at 10 minutes)
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SECURE = not DEBUG  # Use secure cookies in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# Security settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Additional security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True

# Add ngrok bypass header if present
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {asctime} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'pasargad_prints.log'),
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'errors.log'),
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'payment_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'payments.log'),
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['error_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'payments': {
            'handlers': ['console', 'payment_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'orders': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'cart': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'utils.email': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'utils.goshippo_service': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'utils.goshippo_middleware': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
}

# Create logs directory if it doesn't exist
LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# Cache Configuration
# For development, use local memory cache to avoid Redis dependency
# In production, this should be configured to use Redis
USE_REDIS_CACHE = config('USE_REDIS_CACHE', default=False, cast=bool)

if USE_REDIS_CACHE:
    # Production Redis configuration - Simplified to single cache backend
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
                'CONNECTION_POOL_CLASS_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
                'MAX_CONNECTIONS': 50,
                'KEY_PREFIX': 'pasargad',
                'VERSION': 1,
                'TIMEOUT': 300,  # 5 minutes default timeout
                'COMPRESS_MIN_LEN': 10,
                'COMPRESS_LEVEL': 6,
            }
        },
        'api': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/2'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
                'CONNECTION_POOL_CLASS_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                },
                'MAX_CONNECTIONS': 50,
                'KEY_PREFIX': 'pasargad_api',
                'VERSION': 1,
                'TIMEOUT': 300,  # 5 minutes default timeout
                'COMPRESS_MIN_LEN': 10,
                'COMPRESS_LEVEL': 6,
            }
        }
    }
    
    # Use Redis for session storage with default cache
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'
    
else:
    # Development configuration using local memory cache - Simplified to single cache
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
                'CULL_FREQUENCY': 4,
            }
        },
        'api': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'api-cache',
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
                'CULL_FREQUENCY': 4,
            }
        }
    }
    
    # Use database for session storage when Redis is not available
    SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Session configuration is handled in the cache configuration above

# Celery Configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://127.0.0.1:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://127.0.0.1:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes
CELERY_BEAT_SCHEDULE = {
    'check-low-stock': {
        'task': 'products.tasks.check_low_stock',
        'schedule': 3600.0,  # Every hour
    },
    'cleanup-expired-sessions': {
        'task': 'utils.tasks.cleanup_expired_sessions',
        'schedule': 86400.0,  # Every day
    },
    'process-abandoned-carts': {
        'task': 'cart.tasks.process_abandoned_carts',
        'schedule': 86400.0,  # Every day
    },
    # Goshippo shipping tasks
    'track-goshippo-shipments': {
        'task': 'orders.tasks.track_goshippo_shipments',
        'schedule': 3600.0,  # Every hour
    },
    'sync-goshippo-rates': {
        'task': 'orders.tasks.sync_goshippo_rates',
        'schedule': 1800.0,  # Every 30 minutes
    },
    'cleanup-old-goshippo-shipments': {
        'task': 'orders.tasks.cleanup_old_goshippo_shipments',
        'schedule': 86400.0,  # Every day
    },
    'send-shipping-rate-notifications': {
        'task': 'orders.tasks.send_shipping_rate_notifications',
        'schedule': 7200.0,  # Every 2 hours
    },
    'validate-goshippo-addresses': {
        'task': 'orders.tasks.validate_goshippo_addresses',
        'schedule': 3600.0,  # Every hour
    },
}

# Goshippo Configuration
GOSHIPPO_API_KEY = config('GOSHIPPO_API_KEY', default='')
GOSHIPPO_FROM_NAME = config('GOSHIPPO_FROM_NAME', default='Pasargad Prints')
GOSHIPPO_FROM_ADDRESS = config('GOSHIPPO_FROM_ADDRESS', default='')
GOSHIPPO_FROM_CITY = config('GOSHIPPO_FROM_CITY', default='')
GOSHIPPO_FROM_STATE = config('GOSHIPPO_FROM_STATE', default='')
GOSHIPPO_FROM_ZIP = config('GOSHIPPO_FROM_ZIP', default='')
GOSHIPPO_FROM_COUNTRY = config('GOSHIPPO_FROM_COUNTRY', default='US')
GOSHIPPO_FROM_PHONE = config('GOSHIPPO_FROM_PHONE', default='')
GOSHIPPO_FROM_EMAIL = config('GOSHIPPO_FROM_EMAIL', default=DEFAULT_FROM_EMAIL)
GOSHIPPO_SIGNATURE_REQUIRED = config('GOSHIPPO_SIGNATURE_REQUIRED', default=False, cast=bool)

# Default package dimensions (in inches)
DEFAULT_PACKAGE_LENGTH = config('DEFAULT_PACKAGE_LENGTH', default=12, cast=int)
DEFAULT_PACKAGE_WIDTH = config('DEFAULT_PACKAGE_WIDTH', default=12, cast=int)
DEFAULT_PACKAGE_HEIGHT = config('DEFAULT_PACKAGE_HEIGHT', default=6, cast=int)

# CDN Configuration
USE_CDN = config('USE_CDN', default=False, cast=bool)
CDN_URL = config('CDN_URL', default='')
CDN_STATIC_URL = f'{CDN_URL}/static/' if USE_CDN else STATIC_URL
CDN_MEDIA_URL = f'{CDN_URL}/media/' if USE_CDN else MEDIA_URL

# AWS S3 Configuration (for media storage)
USE_S3 = config('USE_S3', default=False, cast=bool)
if USE_S3:
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='us-east-1')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_DEFAULT_ACL = 'public-read'
    AWS_QUERYSTRING_AUTH = False
    
    # Media files
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
    
    # Static files with WhiteNoise for local serving
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Django Allauth Configuration
SITE_ID = 1

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Allauth settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https' if not DEBUG else 'http'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300

# Social account settings
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_QUERY_EMAIL = True
SOCIALACCOUNT_STORE_TOKENS = True
SOCIALACCOUNT_ADAPTER = 'social_auth.adapters.CustomSocialAccountAdapter'

# Social provider settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'APP': {
            'client_id': config('GOOGLE_CLIENT_ID', default=''),
            'secret': config('GOOGLE_CLIENT_SECRET', default=''),
        }
    },
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'first_name',
            'last_name',
            'middle_name',
            'name',
            'name_format',
            'picture',
            'short_name',
            'email',
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': lambda request: 'en_US',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v15.0',
        'APP': {
            'client_id': config('FACEBOOK_CLIENT_ID', default=''),
            'secret': config('FACEBOOK_CLIENT_SECRET', default=''),
        }
    },
    'github': {
        'SCOPE': [
            'user:email',
        ],
        'APP': {
            'client_id': config('GITHUB_CLIENT_ID', default=''),
            'secret': config('GITHUB_CLIENT_SECRET', default=''),
        }
    }
}

# Removed unused settings for notifications, social sharing, and referrals
# These features were not implemented and apps have been removed