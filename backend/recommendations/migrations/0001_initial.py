# Generated by Django 4.2.7 on 2025-07-04 06:30

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0003_product_low_stock_threshold_product_search_vector_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProductScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0, help_text='Recommendation score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('purchased', models.BooleanField(default=False)),
                ('wishlisted', models.BooleanField(default=False)),
                ('last_interaction', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score', '-last_interaction'],
                'indexes': [models.Index(fields=['user', 'score'], name='recommendat_user_id_a5cf3f_idx'), models.Index(fields=['last_interaction'], name='recommendat_last_in_239064_idx')],
                'unique_together': {('user', 'product')},
            },
        ),
        migrations.CreateModel(
            name='ProductView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='products.product')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_product_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
                'indexes': [models.Index(fields=['user', 'product'], name='recommendat_user_id_e2bc09_idx'), models.Index(fields=['session_key', 'product'], name='recommendat_session_80ba66_idx'), models.Index(fields=['viewed_at'], name='recommendat_viewed__92c90f_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProductRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_type', models.CharField(choices=[('similar', 'Similar Product'), ('complementary', 'Complementary Product'), ('bundle', 'Bundle Suggestion'), ('upgrade', 'Upgrade Option')], max_length=20)),
                ('strength', models.FloatField(default=1.0, help_text='Strength of relationship (0.1-10.0)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships', to='products.product')),
                ('related_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_to', to='products.product')),
            ],
            options={
                'ordering': ['-strength', 'relationship_type'],
                'unique_together': {('product', 'related_product', 'relationship_type')},
            },
        ),
    ]
