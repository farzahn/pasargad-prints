import re
from django.core.files.base import ContentFile
from io import BytesIO
import json

# Optional imports
try:
    from user_agents import parse as parse_ua
    USER_AGENTS_AVAILABLE = True
except ImportError:
    USER_AGENTS_AVAILABLE = False

try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib import colors
    from reportlab.lib.units import inch
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False


def parse_user_agent(user_agent_string):
    """Parse user agent string to extract device info"""
    if not user_agent_string:
        return {
            'device_type': 'unknown',
            'browser': 'unknown',
            'os': 'unknown'
        }
    
    if not USER_AGENTS_AVAILABLE:
        # Fallback to basic parsing if user-agents library is not available
        return _basic_user_agent_parse(user_agent_string)
    
    try:
        user_agent = parse_ua(user_agent_string)
        
        # Determine device type
        if user_agent.is_mobile:
            device_type = 'mobile'
        elif user_agent.is_tablet:
            device_type = 'tablet'
        elif user_agent.is_pc:
            device_type = 'desktop'
        else:
            device_type = 'other'
        
        return {
            'device_type': device_type,
            'browser': f"{user_agent.browser.family} {user_agent.browser.version_string}",
            'os': f"{user_agent.os.family} {user_agent.os.version_string}"
        }
    except:
        return _basic_user_agent_parse(user_agent_string)


def _basic_user_agent_parse(user_agent_string):
    """Basic user agent parsing without external libraries"""
    device_type = 'desktop'
    browser = 'unknown'
    os = 'unknown'
    
    # Basic mobile detection
    mobile_patterns = ['Mobile', 'Android', 'iPhone', 'iPad', 'Windows Phone']
    for pattern in mobile_patterns:
        if pattern in user_agent_string:
            device_type = 'mobile'
            break
    
    # Basic browser detection
    if 'Chrome' in user_agent_string:
        browser = 'Chrome'
    elif 'Firefox' in user_agent_string:
        browser = 'Firefox'
    elif 'Safari' in user_agent_string:
        browser = 'Safari'
    elif 'Edge' in user_agent_string:
        browser = 'Edge'
    
    # Basic OS detection
    if 'Windows' in user_agent_string:
        os = 'Windows'
    elif 'Mac' in user_agent_string:
        os = 'macOS'
    elif 'Linux' in user_agent_string:
        os = 'Linux'
    elif 'Android' in user_agent_string:
        os = 'Android'
    elif 'iOS' in user_agent_string:
        os = 'iOS'
    
    return {
        'device_type': device_type,
        'browser': browser,
        'os': os
    }


def get_client_ip(request):
    """Get client IP address from request"""
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip


def generate_report_pdf(report):
    """Generate PDF file for a report"""
    if not REPORTLAB_AVAILABLE:
        # Return None if reportlab is not available
        return None
    
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    elements = []
    
    # Get styles
    styles = getSampleStyleSheet()
    title_style = styles['Title']
    heading_style = styles['Heading2']
    normal_style = styles['Normal']
    
    # Add title
    elements.append(Paragraph(report.name, title_style))
    elements.append(Spacer(1, 0.5*inch))
    
    # Add report info
    info_data = [
        ['Report Type:', dict(report.REPORT_TYPES).get(report.report_type, report.report_type)],
        ['Generated By:', report.generated_by.username if report.generated_by else 'System'],
        ['Generated At:', report.generated_at.strftime('%Y-%m-%d %H:%M:%S')],
    ]
    
    info_table = Table(info_data, colWidths=[2*inch, 4*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
    ]))
    
    elements.append(info_table)
    elements.append(Spacer(1, 0.5*inch))
    
    # Add report data based on type
    if report.report_type == 'sales':
        elements.extend(_generate_sales_report_elements(report.data, styles))
    elif report.report_type == 'inventory':
        elements.extend(_generate_inventory_report_elements(report.data, styles))
    elif report.report_type == 'customer':
        elements.extend(_generate_customer_report_elements(report.data, styles))
    elif report.report_type == 'product':
        elements.extend(_generate_product_report_elements(report.data, styles))
    elif report.report_type == 'marketing':
        elements.extend(_generate_marketing_report_elements(report.data, styles))
    elif report.report_type == 'financial':
        elements.extend(_generate_financial_report_elements(report.data, styles))
    else:
        # Generic data display
        elements.append(Paragraph('Report Data:', heading_style))
        elements.append(Spacer(1, 0.2*inch))
        elements.append(Paragraph(json.dumps(report.data, indent=2), normal_style))
    
    # Build PDF
    doc.build(elements)
    
    # Create file
    pdf_file = ContentFile(buffer.getvalue())
    pdf_file.name = f"{report.report_type}_report_{report.generated_at.strftime('%Y%m%d_%H%M%S')}.pdf"
    
    return pdf_file


def _generate_sales_report_elements(data, styles):
    """Generate PDF elements for sales report"""
    elements = []
    
    # Summary section
    elements.append(Paragraph('Sales Summary', styles['Heading2']))
    elements.append(Spacer(1, 0.2*inch))
    
    summary_data = [
        ['Total Orders:', str(data.get('total_orders', 0))],
        ['Total Revenue:', f"${data.get('total_revenue', 0):,.2f}"],
        ['Average Order Value:', f"${data.get('average_order_value', 0):,.2f}"],
    ]
    
    summary_table = Table(summary_data, colWidths=[2.5*inch, 2*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    elements.append(summary_table)
    elements.append(Spacer(1, 0.3*inch))
    
    # Top selling products
    if 'top_selling_products' in data and data['top_selling_products']:
        elements.append(Paragraph('Top Selling Products', styles['Heading2']))
        elements.append(Spacer(1, 0.2*inch))
        
        product_data = [['Product', 'Quantity Sold', 'Revenue']]
        for product in data['top_selling_products'][:10]:
            product_data.append([
                product.get('product__name', 'Unknown'),
                str(product.get('quantity_sold', 0)),
                f"${product.get('revenue', 0):,.2f}"
            ])
        
        product_table = Table(product_data, colWidths=[3*inch, 1.5*inch, 1.5*inch])
        product_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        elements.append(product_table)
    
    return elements


def _generate_inventory_report_elements(data, styles):
    """Generate PDF elements for inventory report"""
    elements = []
    
    # Summary
    elements.append(Paragraph('Inventory Summary', styles['Heading2']))
    elements.append(Spacer(1, 0.2*inch))
    
    summary_data = [
        ['Total Products:', str(data.get('total_products', 0))],
        ['Inventory Value:', f"${data.get('inventory_value', 0):,.2f}"],
        ['Low Stock Products:', str(len(data.get('low_stock_products', [])))],
        ['Out of Stock Products:', str(len(data.get('out_of_stock_products', [])))],
    ]
    
    summary_table = Table(summary_data, colWidths=[2.5*inch, 2*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    elements.append(summary_table)
    elements.append(Spacer(1, 0.3*inch))
    
    # Low stock products
    if 'low_stock_products' in data and data['low_stock_products']:
        elements.append(Paragraph('Low Stock Products', styles['Heading2']))
        elements.append(Spacer(1, 0.2*inch))
        
        low_stock_data = [['Product ID', 'Product Name', 'Current Stock']]
        for product in data['low_stock_products']:
            low_stock_data.append([
                str(product.get('id', '')),
                product.get('name', 'Unknown'),
                str(product.get('stock', 0))
            ])
        
        low_stock_table = Table(low_stock_data, colWidths=[1.5*inch, 3*inch, 1.5*inch])
        low_stock_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.orange),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        elements.append(low_stock_table)
    
    return elements


def _generate_customer_report_elements(data, styles):
    """Generate PDF elements for customer report"""
    elements = []
    
    # Summary
    elements.append(Paragraph('Customer Analytics', styles['Heading2']))
    elements.append(Spacer(1, 0.2*inch))
    
    summary_data = [
        ['New Customers:', str(data.get('new_customers', 0))],
        ['Active Customers:', str(data.get('active_customers', 0))],
        ['Retention Rate:', f"{data.get('customer_retention_rate', 0):.1f}%"],
    ]
    
    summary_table = Table(summary_data, colWidths=[2.5*inch, 2*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    elements.append(summary_table)
    elements.append(Spacer(1, 0.3*inch))
    
    # Top customers
    if 'top_customers' in data and data['top_customers']:
        elements.append(Paragraph('Top Customers', styles['Heading2']))
        elements.append(Spacer(1, 0.2*inch))
        
        customer_data = [['Customer Email', 'Total Spent']]
        for customer in data['top_customers'][:10]:
            customer_data.append([
                customer.get('email', 'Unknown'),
                f"${customer.get('total_spent', 0):,.2f}"
            ])
        
        customer_table = Table(customer_data, colWidths=[4*inch, 2*inch])
        customer_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        elements.append(customer_table)
    
    return elements


def _generate_product_report_elements(data, styles):
    """Generate PDF elements for product report"""
    elements = []
    
    elements.append(Paragraph('Product Performance Report', styles['Heading2']))
    elements.append(Spacer(1, 0.2*inch))
    
    summary_data = [
        ['Total Product Views:', str(data.get('product_views', 0))],
    ]
    
    summary_table = Table(summary_data, colWidths=[2.5*inch, 2*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    elements.append(summary_table)
    
    return elements


def _generate_marketing_report_elements(data, styles):
    """Generate PDF elements for marketing report"""
    elements = []
    
    elements.append(Paragraph('Marketing Performance', styles['Heading2']))
    elements.append(Spacer(1, 0.2*inch))
    
    summary_data = [
        ['Total Conversions:', str(data.get('total_conversions', 0))],
    ]
    
    # Add conversion by source if available
    if 'conversion_by_source' in data:
        for source, count in data['conversion_by_source'].items():
            if source:
                summary_data.append([f'Conversions from {source}:', str(count)])
    
    summary_table = Table(summary_data, colWidths=[3*inch, 1.5*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, 0), colors.lightgrey),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    elements.append(summary_table)
    
    return elements


def _generate_financial_report_elements(data, styles):
    """Generate PDF elements for financial report"""
    elements = []
    
    elements.append(Paragraph('Financial Summary', styles['Heading2']))
    elements.append(Spacer(1, 0.2*inch))
    
    summary_data = [
        ['Gross Revenue:', f"${data.get('gross_revenue', 0):,.2f}"],
        ['Total Orders:', str(data.get('total_orders', 0))],
    ]
    
    summary_table = Table(summary_data, colWidths=[2.5*inch, 2*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    elements.append(summary_table)
    
    return elements